-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity nms_nms_Pipeline_VITIS_LOOP_65_7_map_arr_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 13; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 99
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of nms_nms_Pipeline_VITIS_LOOP_65_7_map_arr_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000001", 1 => "0000000000011", 2 => "0000000000110", 3 => "0000000001010", 
    4 => "0000000001111", 5 => "0000000010101", 6 => "0000000011100", 7 => "0000000100100", 
    8 => "0000000101101", 9 => "0000000110111", 10 => "0000001000010", 11 => "0000001001110", 
    12 => "0000001011011", 13 => "0000001101001", 14 => "0000001111000", 15 => "0000010001000", 
    16 => "0000010011001", 17 => "0000010101011", 18 => "0000010111110", 19 => "0000011010010", 
    20 => "0000011100111", 21 => "0000011111101", 22 => "0000100010100", 23 => "0000100101100", 
    24 => "0000101000101", 25 => "0000101011111", 26 => "0000101111010", 27 => "0000110010110", 
    28 => "0000110110011", 29 => "0000111010001", 30 => "0000111110000", 31 => "0001000010000", 
    32 => "0001000110001", 33 => "0001001010011", 34 => "0001001110110", 35 => "0001010011010", 
    36 => "0001010111111", 37 => "0001011100101", 38 => "0001100001100", 39 => "0001100110100", 
    40 => "0001101011101", 41 => "0001110000111", 42 => "0001110110010", 43 => "0001111011110", 
    44 => "0010000001011", 45 => "0010000111001", 46 => "0010001101000", 47 => "0010010011000", 
    48 => "0010011001001", 49 => "0010011111011", 50 => "0010100101110", 51 => "0010101100010", 
    52 => "0010110010111", 53 => "0010111001101", 54 => "0011000000100", 55 => "0011000111100", 
    56 => "0011001110101", 57 => "0011010101111", 58 => "0011011101010", 59 => "0011100100110", 
    60 => "0011101100011", 61 => "0011110100001", 62 => "0011111100000", 63 => "0100000100000", 
    64 => "0100001100001", 65 => "0100010100011", 66 => "0100011100110", 67 => "0100100101010", 
    68 => "0100101101111", 69 => "0100110110101", 70 => "0100111111100", 71 => "0101001000100", 
    72 => "0101010001101", 73 => "0101011010111", 74 => "0101100100010", 75 => "0101101101110", 
    76 => "0101110111011", 77 => "0110000001001", 78 => "0110001011000", 79 => "0110010101000", 
    80 => "0110011111001", 81 => "0110101001011", 82 => "0110110011110", 83 => "0110111110010", 
    84 => "0111001000111", 85 => "0111010011101", 86 => "0111011110100", 87 => "0111101001100", 
    88 => "0111110100101", 89 => "0111111111111", 90 => "1000001011010", 91 => "1000010110110", 
    92 => "1000100010011", 93 => "1000101110001", 94 => "1000111010000", 95 => "1001000110000", 
    96 => "1001010010001", 97 => "1001011110011", 98 => "1001101010110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

