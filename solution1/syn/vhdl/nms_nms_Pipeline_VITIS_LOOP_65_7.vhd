-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nms_nms_Pipeline_VITIS_LOOP_65_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    i_2 : IN STD_LOGIC_VECTOR (6 downto 0);
    bboxes_info_x1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bboxes_info_x1_ce0 : OUT STD_LOGIC;
    bboxes_info_x1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bboxes_info_x1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bboxes_info_x1_ce1 : OUT STD_LOGIC;
    bboxes_info_x1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln67 : IN STD_LOGIC_VECTOR (30 downto 0);
    empty_21 : IN STD_LOGIC_VECTOR (22 downto 0);
    bboxes_info_x1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    bboxes_info_y1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bboxes_info_y1_ce0 : OUT STD_LOGIC;
    bboxes_info_y1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bboxes_info_y1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bboxes_info_y1_ce1 : OUT STD_LOGIC;
    bboxes_info_y1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln68 : IN STD_LOGIC_VECTOR (30 downto 0);
    empty_22 : IN STD_LOGIC_VECTOR (22 downto 0);
    bboxes_info_y1_load : IN STD_LOGIC_VECTOR (31 downto 0);
    bboxes_info_x2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bboxes_info_x2_ce0 : OUT STD_LOGIC;
    bboxes_info_x2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bboxes_info_x2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bboxes_info_x2_ce1 : OUT STD_LOGIC;
    bboxes_info_x2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln69 : IN STD_LOGIC_VECTOR (30 downto 0);
    empty_23 : IN STD_LOGIC_VECTOR (22 downto 0);
    bboxes_info_x2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    bboxes_info_y2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bboxes_info_y2_ce0 : OUT STD_LOGIC;
    bboxes_info_y2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bboxes_info_y2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    bboxes_info_y2_ce1 : OUT STD_LOGIC;
    bboxes_info_y2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    bitcast_ln70 : IN STD_LOGIC_VECTOR (30 downto 0);
    empty : IN STD_LOGIC_VECTOR (22 downto 0);
    bboxes_info_y2_load : IN STD_LOGIC_VECTOR (31 downto 0);
    mul1 : IN STD_LOGIC_VECTOR (31 downto 0);
    i_2_cast : IN STD_LOGIC_VECTOR (6 downto 0);
    iou_matrix_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    iou_matrix_ce0 : OUT STD_LOGIC;
    iou_matrix_we0 : OUT STD_LOGIC;
    iou_matrix_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5844_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5844_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5844_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_5844_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5844_p_ce : OUT STD_LOGIC;
    grp_fu_5848_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5848_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5848_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_5848_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5848_p_ce : OUT STD_LOGIC;
    grp_fu_5854_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5854_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5854_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5854_p_ce : OUT STD_LOGIC;
    grp_fu_5858_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5858_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_5858_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_5858_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_5858_p_ce : OUT STD_LOGIC );
end;


architecture behav of nms_nms_Pipeline_VITIS_LOOP_65_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv13_64 : STD_LOGIC_VECTOR (12 downto 0) := "0000001100100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln65_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal map_arr_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal map_arr_ce0 : STD_LOGIC;
    signal map_arr_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_cast_cast_fu_402_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_cast_cast_reg_981 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_reg_986 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_986_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_986_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_986_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal bboxes_info_x1_load_1_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal bboxes_info_y1_load_1_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal bboxes_info_x2_load_1_reg_1037 : STD_LOGIC_VECTOR (31 downto 0);
    signal bboxes_info_y2_load_1_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln80_fu_459_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter6_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter7_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter8_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter9_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter10_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter11_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter12_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter13_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter14_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter15_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter16_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter17_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter18_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter19_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter20_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter21_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter22_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter23_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter24_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter25_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter26_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter27_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter28_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter29_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter30_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter31_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter32_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter33_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter34_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter35_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter36_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter37_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter38_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter39_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter40_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter41_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln80_reg_1051_pp0_iter42_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln67_2_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_2_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_3_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_3_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_2_reg_1066 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_3_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_3_reg_1071 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_2_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_2_reg_1076 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_3_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_3_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_3_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_3_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_1_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_1_reg_1096 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_1_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_1_reg_1101 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln69_1_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln69_1_reg_1106 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_1_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_1_reg_1111 : STD_LOGIC_VECTOR (0 downto 0);
    signal xx1_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal yy1_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal xx2_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal yy2_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub4_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub5_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub3_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add3_reg_1181 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xdiff_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal xdiff_reg_1186_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ydiff_reg_1193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ydiff_reg_1193_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1200 : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_width_fu_835_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_width_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_hight_fu_883_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_hight_reg_1210 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add4_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal add4_reg_1215_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_area_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_area_reg_1220_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_area_reg_1220_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_area_reg_1220_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_area_reg_1220_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal insection_area_reg_1220_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal union_area_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln65_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln67_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul_fu_96 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln80_1_fu_448_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_100 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln65_fu_425_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln80_fu_454_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln67_1_fu_470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_473_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_fu_483_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln68_1_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_502_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln68_fu_512_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln69_1_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_531_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln69_fu_541_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln70_1_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_560_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln70_fu_570_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_fu_586_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln67_1_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln67_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln67_1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_628_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln68_1_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_1_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_670_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln69_1_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln69_1_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln69_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_712_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln70_1_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_754_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln68_fu_764_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln69_fu_774_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln70_fu_784_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln75_fu_794_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_797_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_fu_807_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln75_1_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln76_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_845_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_fu_855_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln76_1_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component nms_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nms_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nms_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nms_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nms_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component nms_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component nms_nms_Pipeline_VITIS_LOOP_65_7_map_arr_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component nms_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    map_arr_U : component nms_nms_Pipeline_VITIS_LOOP_65_7_map_arr_ROM_AUTO_1R
    generic map (
        DataWidth => 13,
        AddressRange => 99,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => map_arr_address0,
        ce0 => map_arr_ce0,
        q0 => map_arr_q0);

    fsub_32ns_32ns_32_5_full_dsp_1_U18 : component nms_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xx2_reg_1146,
        din1 => xx1_reg_1136,
        ce => ap_const_logic_1,
        dout => grp_fu_328_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U19 : component nms_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => yy2_reg_1151,
        din1 => yy1_reg_1141,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U20 : component nms_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub4_reg_1156,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U21 : component nms_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub5_reg_1161,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_341_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U22 : component nms_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_reg_1166,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U23 : component nms_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub3_reg_1171,
        din1 => ap_const_lv32_3F800000,
        ce => ap_const_logic_1,
        dout => grp_fu_351_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U24 : component nms_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul1,
        din1 => mul_reg_1200,
        ce => ap_const_logic_1,
        dout => grp_fu_356_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U25 : component nms_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add4_reg_1215_pp0_iter21_reg,
        din1 => insection_area_reg_1220,
        ce => ap_const_logic_1,
        dout => grp_fu_360_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U27 : component nms_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => insection_width_reg_1205,
        din1 => insection_hight_reg_1210,
        ce => ap_const_logic_1,
        dout => grp_fu_368_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U28 : component nms_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => insection_area_reg_1220_pp0_iter26_reg,
        din1 => union_area_reg_1226,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U30 : component nms_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bboxes_info_y1_load,
        din1 => bboxes_info_y1_load_1_reg_1030,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_380_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U31 : component nms_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bboxes_info_x2_load,
        din1 => bboxes_info_x2_load_1_reg_1037,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_384_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U32 : component nms_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bboxes_info_y2_load,
        din1 => bboxes_info_y2_load_1_reg_1044,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_388_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U33 : component nms_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xdiff_reg_1186,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_392_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U34 : component nms_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ydiff_reg_1193,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_397_p2);

    flow_control_loop_pipe_sequential_init_U : component nms_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter42_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln65_fu_419_p2 = ap_const_lv1_0))) then 
                    j_fu_100 <= add_ln65_fu_425_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_100 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul_fu_96 <= ap_const_lv13_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    phi_mul_fu_96 <= add_ln80_1_fu_448_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add3_reg_1181 <= grp_fu_341_p2;
                add4_reg_1215 <= grp_fu_356_p2;
                add4_reg_1215_pp0_iter21_reg <= add4_reg_1215;
                add_reg_1176 <= grp_fu_336_p2;
                and_ln67_1_reg_1096 <= and_ln67_1_fu_622_p2;
                and_ln68_1_reg_1101 <= and_ln68_1_fu_664_p2;
                and_ln69_1_reg_1106 <= and_ln69_1_fu_706_p2;
                and_ln70_1_reg_1111 <= and_ln70_1_fu_748_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                div_reg_1231 <= grp_fu_372_p2;
                icmp_ln67_2_reg_1056 <= icmp_ln67_2_fu_487_p2;
                icmp_ln67_3_reg_1061 <= icmp_ln67_3_fu_493_p2;
                icmp_ln68_2_reg_1066 <= icmp_ln68_2_fu_516_p2;
                icmp_ln68_3_reg_1071 <= icmp_ln68_3_fu_522_p2;
                icmp_ln69_2_reg_1076 <= icmp_ln69_2_fu_545_p2;
                icmp_ln69_3_reg_1081 <= icmp_ln69_3_fu_551_p2;
                icmp_ln70_2_reg_1086 <= icmp_ln70_2_fu_574_p2;
                icmp_ln70_3_reg_1091 <= icmp_ln70_3_fu_580_p2;
                insection_area_reg_1220 <= grp_fu_368_p2;
                insection_area_reg_1220_pp0_iter22_reg <= insection_area_reg_1220;
                insection_area_reg_1220_pp0_iter23_reg <= insection_area_reg_1220_pp0_iter22_reg;
                insection_area_reg_1220_pp0_iter24_reg <= insection_area_reg_1220_pp0_iter23_reg;
                insection_area_reg_1220_pp0_iter25_reg <= insection_area_reg_1220_pp0_iter24_reg;
                insection_area_reg_1220_pp0_iter26_reg <= insection_area_reg_1220_pp0_iter25_reg;
                insection_hight_reg_1210 <= insection_hight_fu_883_p3;
                insection_width_reg_1205 <= insection_width_fu_835_p3;
                j_1_reg_986_pp0_iter2_reg <= j_1_reg_986_pp0_iter1_reg;
                j_1_reg_986_pp0_iter3_reg <= j_1_reg_986_pp0_iter2_reg;
                mul_reg_1200 <= grp_fu_5854_p_dout0;
                sub3_reg_1171 <= grp_fu_332_p2;
                sub4_reg_1156 <= grp_fu_5844_p_dout0;
                sub5_reg_1161 <= grp_fu_5848_p_dout0;
                sub_ln80_reg_1051_pp0_iter10_reg <= sub_ln80_reg_1051_pp0_iter9_reg;
                sub_ln80_reg_1051_pp0_iter11_reg <= sub_ln80_reg_1051_pp0_iter10_reg;
                sub_ln80_reg_1051_pp0_iter12_reg <= sub_ln80_reg_1051_pp0_iter11_reg;
                sub_ln80_reg_1051_pp0_iter13_reg <= sub_ln80_reg_1051_pp0_iter12_reg;
                sub_ln80_reg_1051_pp0_iter14_reg <= sub_ln80_reg_1051_pp0_iter13_reg;
                sub_ln80_reg_1051_pp0_iter15_reg <= sub_ln80_reg_1051_pp0_iter14_reg;
                sub_ln80_reg_1051_pp0_iter16_reg <= sub_ln80_reg_1051_pp0_iter15_reg;
                sub_ln80_reg_1051_pp0_iter17_reg <= sub_ln80_reg_1051_pp0_iter16_reg;
                sub_ln80_reg_1051_pp0_iter18_reg <= sub_ln80_reg_1051_pp0_iter17_reg;
                sub_ln80_reg_1051_pp0_iter19_reg <= sub_ln80_reg_1051_pp0_iter18_reg;
                sub_ln80_reg_1051_pp0_iter20_reg <= sub_ln80_reg_1051_pp0_iter19_reg;
                sub_ln80_reg_1051_pp0_iter21_reg <= sub_ln80_reg_1051_pp0_iter20_reg;
                sub_ln80_reg_1051_pp0_iter22_reg <= sub_ln80_reg_1051_pp0_iter21_reg;
                sub_ln80_reg_1051_pp0_iter23_reg <= sub_ln80_reg_1051_pp0_iter22_reg;
                sub_ln80_reg_1051_pp0_iter24_reg <= sub_ln80_reg_1051_pp0_iter23_reg;
                sub_ln80_reg_1051_pp0_iter25_reg <= sub_ln80_reg_1051_pp0_iter24_reg;
                sub_ln80_reg_1051_pp0_iter26_reg <= sub_ln80_reg_1051_pp0_iter25_reg;
                sub_ln80_reg_1051_pp0_iter27_reg <= sub_ln80_reg_1051_pp0_iter26_reg;
                sub_ln80_reg_1051_pp0_iter28_reg <= sub_ln80_reg_1051_pp0_iter27_reg;
                sub_ln80_reg_1051_pp0_iter29_reg <= sub_ln80_reg_1051_pp0_iter28_reg;
                sub_ln80_reg_1051_pp0_iter2_reg <= sub_ln80_reg_1051;
                sub_ln80_reg_1051_pp0_iter30_reg <= sub_ln80_reg_1051_pp0_iter29_reg;
                sub_ln80_reg_1051_pp0_iter31_reg <= sub_ln80_reg_1051_pp0_iter30_reg;
                sub_ln80_reg_1051_pp0_iter32_reg <= sub_ln80_reg_1051_pp0_iter31_reg;
                sub_ln80_reg_1051_pp0_iter33_reg <= sub_ln80_reg_1051_pp0_iter32_reg;
                sub_ln80_reg_1051_pp0_iter34_reg <= sub_ln80_reg_1051_pp0_iter33_reg;
                sub_ln80_reg_1051_pp0_iter35_reg <= sub_ln80_reg_1051_pp0_iter34_reg;
                sub_ln80_reg_1051_pp0_iter36_reg <= sub_ln80_reg_1051_pp0_iter35_reg;
                sub_ln80_reg_1051_pp0_iter37_reg <= sub_ln80_reg_1051_pp0_iter36_reg;
                sub_ln80_reg_1051_pp0_iter38_reg <= sub_ln80_reg_1051_pp0_iter37_reg;
                sub_ln80_reg_1051_pp0_iter39_reg <= sub_ln80_reg_1051_pp0_iter38_reg;
                sub_ln80_reg_1051_pp0_iter3_reg <= sub_ln80_reg_1051_pp0_iter2_reg;
                sub_ln80_reg_1051_pp0_iter40_reg <= sub_ln80_reg_1051_pp0_iter39_reg;
                sub_ln80_reg_1051_pp0_iter41_reg <= sub_ln80_reg_1051_pp0_iter40_reg;
                sub_ln80_reg_1051_pp0_iter42_reg <= sub_ln80_reg_1051_pp0_iter41_reg;
                sub_ln80_reg_1051_pp0_iter4_reg <= sub_ln80_reg_1051_pp0_iter3_reg;
                sub_ln80_reg_1051_pp0_iter5_reg <= sub_ln80_reg_1051_pp0_iter4_reg;
                sub_ln80_reg_1051_pp0_iter6_reg <= sub_ln80_reg_1051_pp0_iter5_reg;
                sub_ln80_reg_1051_pp0_iter7_reg <= sub_ln80_reg_1051_pp0_iter6_reg;
                sub_ln80_reg_1051_pp0_iter8_reg <= sub_ln80_reg_1051_pp0_iter7_reg;
                sub_ln80_reg_1051_pp0_iter9_reg <= sub_ln80_reg_1051_pp0_iter8_reg;
                sub_reg_1166 <= grp_fu_328_p2;
                union_area_reg_1226 <= grp_fu_360_p2;
                xdiff_reg_1186 <= grp_fu_346_p2;
                xdiff_reg_1186_pp0_iter16_reg <= xdiff_reg_1186;
                ydiff_reg_1193 <= grp_fu_351_p2;
                ydiff_reg_1193_pp0_iter16_reg <= ydiff_reg_1193;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    i_2_cast_cast_reg_981(6 downto 0) <= i_2_cast_cast_fu_402_p1(6 downto 0);
                j_1_reg_986 <= ap_sig_allocacmp_j_1;
                j_1_reg_986_pp0_iter1_reg <= j_1_reg_986;
                sub_ln80_reg_1051 <= sub_ln80_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bboxes_info_x1_load_1_reg_1023 <= bboxes_info_x1_q1;
                bboxes_info_x2_load_1_reg_1037 <= bboxes_info_x2_q1;
                bboxes_info_y1_load_1_reg_1030 <= bboxes_info_y1_q1;
                bboxes_info_y2_load_1_reg_1044 <= bboxes_info_y2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                xx1_reg_1136 <= bboxes_info_x1_q0;
                xx2_reg_1146 <= bboxes_info_x2_q0;
                yy1_reg_1141 <= bboxes_info_y1_q0;
                yy2_reg_1151 <= bboxes_info_y2_q0;
            end if;
        end if;
    end process;
    i_2_cast_cast_reg_981(12 downto 7) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln65_fu_425_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv7_1));
    add_ln80_1_fu_448_p2 <= std_logic_vector(unsigned(phi_mul_fu_96) + unsigned(ap_const_lv13_64));
    add_ln80_fu_454_p2 <= std_logic_vector(unsigned(i_2_cast_cast_reg_981) + unsigned(phi_mul_fu_96));
    and_ln67_1_fu_622_p2 <= (grp_fu_5858_p_dout0 and and_ln67_fu_616_p2);
    and_ln67_fu_616_p2 <= (or_ln67_fu_606_p2 and or_ln67_1_fu_612_p2);
    and_ln68_1_fu_664_p2 <= (grp_fu_380_p2 and and_ln68_fu_658_p2);
    and_ln68_fu_658_p2 <= (or_ln68_fu_648_p2 and or_ln68_1_fu_654_p2);
    and_ln69_1_fu_706_p2 <= (grp_fu_384_p2 and and_ln69_fu_700_p2);
    and_ln69_fu_700_p2 <= (or_ln69_fu_690_p2 and or_ln69_1_fu_696_p2);
    and_ln70_1_fu_748_p2 <= (grp_fu_388_p2 and and_ln70_fu_742_p2);
    and_ln70_fu_742_p2 <= (or_ln70_fu_732_p2 and or_ln70_1_fu_738_p2);
    and_ln75_fu_829_p2 <= (or_ln75_fu_823_p2 and grp_fu_392_p2);
    and_ln76_fu_877_p2 <= (or_ln76_fu_871_p2 and grp_fu_397_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln65_fu_419_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln65_fu_419_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter42_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter42_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_100)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_100;
        end if; 
    end process;

    bboxes_info_x1_address0 <= zext_ln67_fu_759_p1(7 - 1 downto 0);
    bboxes_info_x1_address1 <= zext_ln65_fu_431_p1(7 - 1 downto 0);

    bboxes_info_x1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bboxes_info_x1_ce0 <= ap_const_logic_1;
        else 
            bboxes_info_x1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bboxes_info_x1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bboxes_info_x1_ce1 <= ap_const_logic_1;
        else 
            bboxes_info_x1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bboxes_info_x2_address0 <= zext_ln69_fu_779_p1(7 - 1 downto 0);
    bboxes_info_x2_address1 <= zext_ln65_fu_431_p1(7 - 1 downto 0);

    bboxes_info_x2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bboxes_info_x2_ce0 <= ap_const_logic_1;
        else 
            bboxes_info_x2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bboxes_info_x2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bboxes_info_x2_ce1 <= ap_const_logic_1;
        else 
            bboxes_info_x2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bboxes_info_y1_address0 <= zext_ln68_fu_769_p1(7 - 1 downto 0);
    bboxes_info_y1_address1 <= zext_ln65_fu_431_p1(7 - 1 downto 0);

    bboxes_info_y1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bboxes_info_y1_ce0 <= ap_const_logic_1;
        else 
            bboxes_info_y1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bboxes_info_y1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bboxes_info_y1_ce1 <= ap_const_logic_1;
        else 
            bboxes_info_y1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bboxes_info_y2_address0 <= zext_ln70_fu_789_p1(7 - 1 downto 0);
    bboxes_info_y2_address1 <= zext_ln65_fu_431_p1(7 - 1 downto 0);

    bboxes_info_y2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bboxes_info_y2_ce0 <= ap_const_logic_1;
        else 
            bboxes_info_y2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bboxes_info_y2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bboxes_info_y2_ce1 <= ap_const_logic_1;
        else 
            bboxes_info_y2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln67_1_fu_470_p1 <= bboxes_info_x1_load_1_reg_1023;
    bitcast_ln68_1_fu_499_p1 <= bboxes_info_y1_load_1_reg_1030;
    bitcast_ln69_1_fu_528_p1 <= bboxes_info_x2_load_1_reg_1037;
    bitcast_ln70_1_fu_557_p1 <= bboxes_info_y2_load_1_reg_1044;
    bitcast_ln75_fu_794_p1 <= xdiff_reg_1186_pp0_iter16_reg;
    bitcast_ln76_fu_842_p1 <= ydiff_reg_1193_pp0_iter16_reg;
    grp_fu_5844_p_ce <= ap_const_logic_1;
    grp_fu_5844_p_din0 <= bboxes_info_x2_load_1_reg_1037;
    grp_fu_5844_p_din1 <= bboxes_info_x1_load_1_reg_1023;
    grp_fu_5844_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_5848_p_ce <= ap_const_logic_1;
    grp_fu_5848_p_din0 <= bboxes_info_y2_load_1_reg_1044;
    grp_fu_5848_p_din1 <= bboxes_info_y1_load_1_reg_1030;
    grp_fu_5848_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_5854_p_ce <= ap_const_logic_1;
    grp_fu_5854_p_din0 <= add_reg_1176;
    grp_fu_5854_p_din1 <= add3_reg_1181;
    grp_fu_5858_p_ce <= ap_const_logic_1;
    grp_fu_5858_p_din0 <= bboxes_info_x1_load;
    grp_fu_5858_p_din1 <= bboxes_info_x1_load_1_reg_1023;
    grp_fu_5858_p_opcode <= ap_const_lv5_2;
    i_2_cast_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_cast),13));
    icmp_ln65_fu_419_p2 <= "1" when (ap_sig_allocacmp_j_1 = i_2) else "0";
    icmp_ln67_1_fu_601_p2 <= "1" when (empty_21 = ap_const_lv23_0) else "0";
    icmp_ln67_2_fu_487_p2 <= "0" when (tmp_4_fu_473_p4 = ap_const_lv8_FF) else "1";
    icmp_ln67_3_fu_493_p2 <= "1" when (trunc_ln67_fu_483_p1 = ap_const_lv23_0) else "0";
    icmp_ln67_fu_595_p2 <= "0" when (tmp_3_fu_586_p4 = ap_const_lv8_FF) else "1";
    icmp_ln68_1_fu_643_p2 <= "1" when (empty_22 = ap_const_lv23_0) else "0";
    icmp_ln68_2_fu_516_p2 <= "0" when (tmp_7_fu_502_p4 = ap_const_lv8_FF) else "1";
    icmp_ln68_3_fu_522_p2 <= "1" when (trunc_ln68_fu_512_p1 = ap_const_lv23_0) else "0";
    icmp_ln68_fu_637_p2 <= "0" when (tmp_6_fu_628_p4 = ap_const_lv8_FF) else "1";
    icmp_ln69_1_fu_685_p2 <= "1" when (empty_23 = ap_const_lv23_0) else "0";
    icmp_ln69_2_fu_545_p2 <= "0" when (tmp_s_fu_531_p4 = ap_const_lv8_FF) else "1";
    icmp_ln69_3_fu_551_p2 <= "1" when (trunc_ln69_fu_541_p1 = ap_const_lv23_0) else "0";
    icmp_ln69_fu_679_p2 <= "0" when (tmp_9_fu_670_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_1_fu_727_p2 <= "1" when (empty = ap_const_lv23_0) else "0";
    icmp_ln70_2_fu_574_p2 <= "0" when (tmp_12_fu_560_p4 = ap_const_lv8_FF) else "1";
    icmp_ln70_3_fu_580_p2 <= "1" when (trunc_ln70_fu_570_p1 = ap_const_lv23_0) else "0";
    icmp_ln70_fu_721_p2 <= "0" when (tmp_11_fu_712_p4 = ap_const_lv8_FF) else "1";
    icmp_ln75_1_fu_817_p2 <= "1" when (trunc_ln75_fu_807_p1 = ap_const_lv23_0) else "0";
    icmp_ln75_fu_811_p2 <= "0" when (tmp_14_fu_797_p4 = ap_const_lv8_FF) else "1";
    icmp_ln76_1_fu_865_p2 <= "1" when (trunc_ln76_fu_855_p1 = ap_const_lv23_0) else "0";
    icmp_ln76_fu_859_p2 <= "0" when (tmp_16_fu_845_p4 = ap_const_lv8_FF) else "1";
    insection_hight_fu_883_p3 <= 
        ydiff_reg_1193_pp0_iter16_reg when (and_ln76_fu_877_p2(0) = '1') else 
        ap_const_lv32_0;
    insection_width_fu_835_p3 <= 
        xdiff_reg_1186_pp0_iter16_reg when (and_ln75_fu_829_p2(0) = '1') else 
        ap_const_lv32_0;
    iou_matrix_address0 <= zext_ln80_fu_890_p1(13 - 1 downto 0);

    iou_matrix_ce0_assign_proc : process(ap_enable_reg_pp0_iter43, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1))) then 
            iou_matrix_ce0 <= ap_const_logic_1;
        else 
            iou_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iou_matrix_d0 <= div_reg_1231;

    iou_matrix_we0_assign_proc : process(ap_enable_reg_pp0_iter43, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1))) then 
            iou_matrix_we0 <= ap_const_logic_1;
        else 
            iou_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;

    map_arr_address0 <= zext_ln65_fu_431_p1(7 - 1 downto 0);

    map_arr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            map_arr_ce0 <= ap_const_logic_1;
        else 
            map_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln67_1_fu_612_p2 <= (icmp_ln67_3_reg_1061 or icmp_ln67_2_reg_1056);
    or_ln67_fu_606_p2 <= (icmp_ln67_fu_595_p2 or icmp_ln67_1_fu_601_p2);
    or_ln68_1_fu_654_p2 <= (icmp_ln68_3_reg_1071 or icmp_ln68_2_reg_1066);
    or_ln68_fu_648_p2 <= (icmp_ln68_fu_637_p2 or icmp_ln68_1_fu_643_p2);
    or_ln69_1_fu_696_p2 <= (icmp_ln69_3_reg_1081 or icmp_ln69_2_reg_1076);
    or_ln69_fu_690_p2 <= (icmp_ln69_fu_679_p2 or icmp_ln69_1_fu_685_p2);
    or_ln70_1_fu_738_p2 <= (icmp_ln70_3_reg_1091 or icmp_ln70_2_reg_1086);
    or_ln70_fu_732_p2 <= (icmp_ln70_fu_721_p2 or icmp_ln70_1_fu_727_p2);
    or_ln75_fu_823_p2 <= (icmp_ln75_fu_811_p2 or icmp_ln75_1_fu_817_p2);
    or_ln76_fu_871_p2 <= (icmp_ln76_fu_859_p2 or icmp_ln76_1_fu_865_p2);
    select_ln67_fu_754_p3 <= 
        i_2 when (and_ln67_1_reg_1096(0) = '1') else 
        j_1_reg_986_pp0_iter3_reg;
    select_ln68_fu_764_p3 <= 
        i_2 when (and_ln68_1_reg_1101(0) = '1') else 
        j_1_reg_986_pp0_iter3_reg;
    select_ln69_fu_774_p3 <= 
        i_2 when (and_ln69_1_reg_1106(0) = '1') else 
        j_1_reg_986_pp0_iter3_reg;
    select_ln70_fu_784_p3 <= 
        i_2 when (and_ln70_1_reg_1111(0) = '1') else 
        j_1_reg_986_pp0_iter3_reg;
    sub_ln80_fu_459_p2 <= std_logic_vector(unsigned(add_ln80_fu_454_p2) - unsigned(map_arr_q0));
    tmp_11_fu_712_p4 <= bitcast_ln70(30 downto 23);
    tmp_12_fu_560_p4 <= bitcast_ln70_1_fu_557_p1(30 downto 23);
    tmp_14_fu_797_p4 <= bitcast_ln75_fu_794_p1(30 downto 23);
    tmp_16_fu_845_p4 <= bitcast_ln76_fu_842_p1(30 downto 23);
    tmp_3_fu_586_p4 <= bitcast_ln67(30 downto 23);
    tmp_4_fu_473_p4 <= bitcast_ln67_1_fu_470_p1(30 downto 23);
    tmp_6_fu_628_p4 <= bitcast_ln68(30 downto 23);
    tmp_7_fu_502_p4 <= bitcast_ln68_1_fu_499_p1(30 downto 23);
    tmp_9_fu_670_p4 <= bitcast_ln69(30 downto 23);
    tmp_s_fu_531_p4 <= bitcast_ln69_1_fu_528_p1(30 downto 23);
    trunc_ln67_fu_483_p1 <= bitcast_ln67_1_fu_470_p1(23 - 1 downto 0);
    trunc_ln68_fu_512_p1 <= bitcast_ln68_1_fu_499_p1(23 - 1 downto 0);
    trunc_ln69_fu_541_p1 <= bitcast_ln69_1_fu_528_p1(23 - 1 downto 0);
    trunc_ln70_fu_570_p1 <= bitcast_ln70_1_fu_557_p1(23 - 1 downto 0);
    trunc_ln75_fu_807_p1 <= bitcast_ln75_fu_794_p1(23 - 1 downto 0);
    trunc_ln76_fu_855_p1 <= bitcast_ln76_fu_842_p1(23 - 1 downto 0);
    zext_ln65_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),64));
    zext_ln67_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln67_fu_754_p3),64));
    zext_ln68_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_fu_764_p3),64));
    zext_ln69_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln69_fu_774_p3),64));
    zext_ln70_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln70_fu_784_p3),64));
    zext_ln80_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln80_reg_1051_pp0_iter42_reg),64));
end behav;
